// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole  @default(USER)
  accounts              Account[]
  
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
 
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refresh_token         String?   @db.Text
  access_token          String?   @db.Text
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?   @db.Text
  session_state         String?
  user                  User      @relation(fields:[userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Profile {
  id                    String    @id @default(uuid())
  userId                String    @unique
  name                  String
  imageUrl              String    @db.Text
  email                 String    @db.Text
  servers               Server[]
  members               Member[]
  channels              Channel[]
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}
// model of verification token sent via emails to verify emails
model VerificationToken {
  id                    String    @id @default(cuid())
  email                 String
  token                 String    @unique
  expires               DateTime

  @@unique([email, token])
}

// model of password reset token
model PasswordResetToken {
  id                    String    @id @default(cuid())
  email                 String
  token                 String    @unique
  expires               DateTime

  @@unique([email, token])
}

// model of two factor token sent to user for two factor authentication
model TwoFactorToken {
  id                    String    @id @default(cuid())
  email                 String
  token                 String    @unique
  expires               DateTime

  @@unique([email, token])
}

// model to confirm two factor authentication
model TwoFactorConfirmation{
  id                    String    @id @default(cuid())
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// model for server
model Server {
  id                    String    @id @default(uuid())
  name                  String
  imageUrl              String    @db.Text
  inviteCode            String    @db.Text
  profileId             String
  profile               Profile   @relation(fields: [ profileId], references: [id], onDelete: Cascade)
  members               Member[]
  channels              Channel[]
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([profileId])
}

// enum for member role
enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

// model for server members
model Member {
  id                    String      @id @default(uuid())
  role                  MemberRole  @default(GUEST)
  profileId             String
  profile               Profile     @relation (fields: [profileId], references: [id], onDelete: Cascade)
  serverId              String
  server                Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  @@index([profileId])
  @@index([serverId])
}

// enum for Channel Type
enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

// model for Channel
model Channel {
  id                    String      @id @default(uuid())
  name                  String
  type                  ChannelType @default(TEXT)
  profileId             String
  profile               Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId              String
  server                Server      @relation(fields: [serverId], references: [id], onDelete:  Cascade)
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  @@index([profileId])
  @@index([serverId])
}